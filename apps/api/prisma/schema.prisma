// apps/api/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usage {
  id               String   @id @default(cuid())
  ts               DateTime
  day              DateTime
  provider         String
  model            String
  orgId            String
  userId           String
  prompt_tokens    Int?
  completion_tokens Int?
  total_tokens     Int?
  cost_usd         Float?
  createdAt        DateTime @default(now())

  @@index([orgId, day])
  @@index([provider, model, day])
}

model Organization {
  id           String   @id @default(cuid())
  name         String
  createdAt    DateTime @default(now())
  
  // Stripe Integration
  stripeCustomerId String? @unique
  
  // API Key Management
  apiKey           String? @unique
  apiKeyCreatedAt  DateTime?
  
  // Custom Limits (override plan defaults)
  customMonthlyTokens    Int?      // Custom monthly token limit
  customDailyTokens      Int?      // Custom daily token limit  
  customStorageMB        Int?      // Custom storage limit in MB
  customMaxFileSizeMB    Int?      // Custom max file size in MB
  customLimitsUpdatedAt  DateTime? // When custom limits were last updated
  customLimitsUpdatedBy  String?   // Admin user who updated limits
  customLimitsReason     String?   // Reason for custom limits
  
  users        User[]
  subscriptions Subscription[]
  threads      Thread[]
  files        FileAsset[]
  alertRules   AlertRule[]
  alerts       Alert[]
  alertMetrics AlertMetric[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  emailVerified DateTime?
  image     String?
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  role      String   @default("USER") // USER, ADMIN
  createdAt DateTime @default(now())
  messages  Message[]
  accounts  Account[]
  sessions  Session[]
}

model Plan {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  monthlyCreditsTokens Int      // créditos/mês (tokens)
  dailyTokenLimit      Int      // limite diário (tokens)
  storageLimitMB       Int      // limite de armazenamento por org
  maxFileSizeMB        Int
  features  String
  createdAt DateTime @default(now())
  
  // Stripe Integration
  stripePriceId String? @unique  // Stripe Price ID for this plan
  stripeProductId String?        // Stripe Product ID
  
  subscriptions Subscription[]
}

model Subscription {
  id        String   @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  planId    String
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Restrict)
  active    Boolean  @default(true)
  
  // Period management
  periodStart DateTime @default(now())
  periodEnd   DateTime
  
  // Stripe Integration - CORE FIELDS
  stripeSubscriptionId String? @unique
  stripeCustomerId     String?  // Denormalized for quick access
  stripePriceId        String?
  stripeStatus         String?  // active, canceled, past_due, etc.
  
  // Cancellation Management
  cancelAtPeriodEnd    Boolean @default(false)
  cancelledAt          DateTime?
  cancellationReason   String?
  
  // Retention & Analytics
  retentionOffersCount Int @default(0)
  lastRetentionOfferAt DateTime?
  
  // Billing
  trialEnd             DateTime?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Thread {
  id        String   @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  title     String?
  createdBy String
  createdAt DateTime @default(now())
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  threadId  String
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  role      String
  content   String
  createdAt DateTime @default(now())
}

model FileAsset {
  id        String   @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  userId    String?
  filename  String
  mime      String
  sizeBytes Int
  sha256    String
  storagePath String  // local path (dev) ou chave S3
  createdAt DateTime @default(now())

  @@index([orgId])
}

/// NextAuth.js core tables
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                 String   @id @default(cuid())
  sessionToken       String   @unique
  userId             String
  expires            DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime
  @@unique([identifier, token])
}

// Stripe Webhook Events
model StripeWebhook {
  id              String   @id @default(cuid())
  stripeEventId   String   @unique
  eventType       String
  processed       Boolean  @default(false)
  data            String   // JSON payload
  createdAt       DateTime @default(now())
  processedAt     DateTime?
  error           String?
  
  @@index([eventType, processed])
}

// Alert System Models
model AlertRule {
  id              String   @id @default(cuid())
  name            String
  description     String?
  enabled         Boolean  @default(true)
  
  // Alert Type and Conditions
  alertType       String   // 'USAGE', 'ERROR_RATE', 'FINANCIAL', 'SECURITY', 'SYSTEM_HEALTH'
  metric          String   // 'tokens_used', 'error_rate', 'payment_failed', etc.
  operator        String   // 'gt', 'lt', 'eq', 'gte', 'lte'
  threshold       Float    // The value to compare against
  timeWindow      Int      // Time window in minutes for evaluation
  
  // Notification Settings
  notificationChannels String // JSON array: ['email', 'dashboard', 'webhook']
  recipients      String?  // JSON array of email addresses or webhook URLs
  
  // Organization Scope (null = global)
  orgId           String?  
  org             Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Rate Limiting
  cooldownMinutes Int      @default(60)  // Minimum time between alerts
  lastTriggered   DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt @default(now())
  createdBy       String   // Admin user who created the rule
  
  alerts          Alert[]
  
  @@index([alertType, enabled])
  @@index([orgId, enabled])
}

model Alert {
  id              String   @id @default(cuid())
  
  // Alert Details
  alertRuleId     String
  alertRule       AlertRule @relation(fields: [alertRuleId], references: [id], onDelete: Cascade)
  
  title           String
  message         String
  severity        String   @default("MEDIUM") // 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL'
  
  // Context Data
  orgId           String?
  org             Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  metricValue     Float    // The actual value that triggered the alert
  threshold       Float    // The threshold that was exceeded
  
  // Status and Resolution
  status          String   @default("ACTIVE")  // 'ACTIVE', 'ACKNOWLEDGED', 'RESOLVED'
  acknowledgedAt  DateTime?
  acknowledgedBy  String?
  resolvedAt      DateTime?
  resolvedBy      String?
  resolution      String?
  
  // Notification Tracking
  notificationsSent String? // JSON array of sent notifications
  notificationErrors String? // JSON array of notification errors
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt @default(now())
  
  @@index([status, createdAt])
  @@index([orgId, status])
  @@index([alertRuleId, createdAt])
}

// Alert Metrics Cache (for performance)
model AlertMetric {
  id              String   @id @default(cuid())
  
  // Metric Identity
  metricName      String   // 'daily_tokens', 'error_rate_5min', etc.
  orgId           String?  // null for global metrics
  org             Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Metric Data
  value           Float
  timestamp       DateTime
  metadata        String?  // JSON with additional context
  
  createdAt       DateTime @default(now())
  
  @@index([metricName, orgId, timestamp])
  @@index([timestamp]) // For cleanup of old metrics
}