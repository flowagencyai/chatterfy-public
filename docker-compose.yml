version: '3.8'

services:
  # Base de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: chatterfy-postgres
    environment:
      POSTGRES_DB: chatterfy
      POSTGRES_USER: chatterfy
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chatterfy123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - chatterfy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatterfy -d chatterfy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: chatterfy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chatterfy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: chatterfy-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://chatterfy:${POSTGRES_PASSWORD:-chatterfy123}@postgres:5432/chatterfy
      REDIS_URL: redis://redis:6379
      API_PORT: 8787
      # Provider API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      # AWS S3
      USE_S3: ${USE_S3:-true}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_REGION: ${AWS_S3_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      # Rate Limiting
      RATE_LIMIT_RPM: ${RATE_LIMIT_RPM:-120}
      ORG_RATE_LIMIT_RPM: ${ORG_RATE_LIMIT_RPM:-600}
      USER_RATE_LIMIT_RPM: ${USER_RATE_LIMIT_RPM:-240}
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,https://yourdomain.com}
    ports:
      - "8787:8787"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - chatterfy-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8787/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: chatterfy-web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE:-http://localhost:8787}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      # Email SMTP
      EMAIL_SERVER: ${EMAIL_SERVER}
      EMAIL_FROM: ${EMAIL_FROM}
    ports:
      - "3000:3000"
    networks:
      - chatterfy-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Opcional para produção)
  nginx:
    image: nginx:alpine
    container_name: chatterfy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - chatterfy-network
    depends_on:
      - web
      - api
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  logs_data:

networks:
  chatterfy-network:
    driver: bridge