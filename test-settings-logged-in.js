const { chromium } = require('playwright');

async function testSettingsModalLoggedIn() {
  console.log('üîß Conectando ao seu navegador logado para testar modal de configura√ß√µes...');
  
  // Conectar ao navegador existente (Chrome/Chromium)
  const browser = await chromium.connectOverCDP('http://localhost:9222');
  const context = browser.contexts()[0];
  const page = context.pages()[0] || await context.newPage();
  
  try {
    // Navegar para a p√°gina se necess√°rio
    console.log('üìç Navegando/atualizando p√°gina...');
    await page.goto('http://localhost:3001');
    await page.waitForLoadState('networkidle');
    
    // Procurar bot√£o de configura√ß√µes/settings
    console.log('‚öôÔ∏è Procurando bot√£o de configura√ß√µes...');
    
    const settingsSelectors = [
      'button[aria-label*="Settings"]',
      'button[aria-label*="Configura√ß√µes"]', 
      'button[title*="Settings"]',
      'button[title*="Configura√ß√µes"]',
      'button:has-text("‚öôÔ∏è")',
      'button:has-text("Settings")',
      'button:has-text("Configura√ß√µes")',
      '[data-testid="settings"]',
      'button svg[viewBox="0 0 24 24"] path[d*="19.4"]', // √çcone t√≠pico de settings
      'button svg[viewBox="0 0 24 24"]:has(circle[cx="12"][cy="12"][r="3"])', // Outro √≠cone comum
    ];
    
    let settingsButton = null;
    for (const selector of settingsSelectors) {
      try {
        settingsButton = await page.$(selector);
        if (settingsButton) {
          console.log(`‚úÖ Bot√£o de configura√ß√µes encontrado: ${selector}`);
          break;
        }
      } catch (e) {
        continue;
      }
    }
    
    // Se n√£o encontrou, procurar por posi√ß√£o ou contexto
    if (!settingsButton) {
      console.log('üîç Procurando bot√µes que podem ser de configura√ß√µes...');
      
      const allButtons = await page.$$('button');
      console.log(`Encontrados ${allButtons.length} bot√µes`);
      
      for (let i = 0; i < allButtons.length; i++) {
        const btn = allButtons[i];
        const text = await btn.textContent();
        const ariaLabel = await btn.getAttribute('aria-label');
        const title = await btn.getAttribute('title');
        
        if (text || ariaLabel || title) {
          console.log(`Bot√£o ${i}: "${text}" | aria-label="${ariaLabel}" | title="${title}"`);
        }
        
        // Procurar por palavras-chave
        const content = (text + ' ' + (ariaLabel || '') + ' ' + (title || '')).toLowerCase();
        if (content.includes('config') || content.includes('setting') || content.includes('gear')) {
          settingsButton = btn;
          console.log(`‚úÖ Bot√£o de configura√ß√µes encontrado por contexto!`);
          break;
        }
      }
    }
    
    if (!settingsButton) {
      console.log('‚ùå Bot√£o de configura√ß√µes n√£o encontrado. Vou tentar encontrar manual...');
      console.log('Por favor, manualmente clique no bot√£o de configura√ß√µes ou pressione uma tecla para continuar...');
      await page.waitForTimeout(10000);
    } else {
      // Abrir modal de configura√ß√µes
      console.log('üîì Abrindo modal de configura√ß√µes...');
      await settingsButton.click();
      await page.waitForTimeout(1500);
    }
    
    // Verificar se modal abriu
    const modal = await page.$('[role="dialog"], .modal, div:has-text("Configura√ß√µes"):visible');
    if (!modal) {
      console.log('‚ùå Modal n√£o encontrado. Aguardando abertura manual...');
      await page.waitForTimeout(5000);
    }
    
    console.log('\nüß™ INICIANDO TESTES DE FUNCIONALIDADE...\n');
    
    const testResults = {};
    
    // Teste 1: Bot√£o "Editar" do nome
    console.log('1Ô∏è‚É£ Testando bot√£o "Editar" do nome...');
    try {
      const editButton = await page.locator('button:has-text("Editar")').first();
      if (await editButton.isVisible()) {
        console.log('   ‚úì Bot√£o "Editar" encontrado');
        await editButton.click();
        await page.waitForTimeout(1000);
        
        // Verificar se apareceu campo de edi√ß√£o ou modal
        const editField = await page.$('input[type="text"]:focus, textarea:focus, [contenteditable="true"]:focus');
        const newModal = await page.$('[role="dialog"]:not(:has-text("Configura√ß√µes"))');
        
        if (editField) {
          testResults.editName = '‚úÖ FUNCIONAL - Campo de edi√ß√£o ativo';
          console.log('   ‚úÖ Campo de edi√ß√£o apareceu');
        } else if (newModal) {
          testResults.editName = '‚úÖ FUNCIONAL - Modal de edi√ß√£o abriu';
          console.log('   ‚úÖ Modal de edi√ß√£o abriu');
        } else {
          testResults.editName = '‚ö†Ô∏è VISUAL - Clic√°vel mas sem resultado vis√≠vel';
          console.log('   ‚ö†Ô∏è Clic√°vel mas sem resultado vis√≠vel');
        }
      } else {
        testResults.editName = '‚ùå N√ÉO ENCONTRADO';
        console.log('   ‚ùå Bot√£o "Editar" n√£o encontrado');
      }
    } catch (error) {
      testResults.editName = `üö® ERRO: ${error.message}`;
      console.log(`   üö® Erro: ${error.message}`);
    }
    
    // Teste 2: Bot√£o "Fazer Upgrade para Enterprise"
    console.log('\n2Ô∏è‚É£ Testando bot√£o "Fazer Upgrade para Enterprise"...');
    try {
      const upgradeButton = await page.locator('button:has-text("Fazer Upgrade"), button:has-text("Upgrade")').first();
      if (await upgradeButton.isVisible()) {
        console.log('   ‚úì Bot√£o "Upgrade" encontrado');
        
        const initialUrl = page.url();
        await upgradeButton.click();
        await page.waitForTimeout(2000);
        
        const newUrl = page.url();
        const newTab = context.pages().length > 1;
        const newModal = await page.$('[role="dialog"]:not(:has-text("Configura√ß√µes"))');
        
        if (newUrl !== initialUrl) {
          testResults.upgradeButton = '‚úÖ FUNCIONAL - Redirecionou para nova p√°gina';
          console.log(`   ‚úÖ Redirecionou para: ${newUrl}`);
        } else if (newTab) {
          testResults.upgradeButton = '‚úÖ FUNCIONAL - Abriu nova aba';
          console.log('   ‚úÖ Abriu nova aba');
        } else if (newModal) {
          testResults.upgradeButton = '‚úÖ FUNCIONAL - Abriu modal de upgrade';
          console.log('   ‚úÖ Modal de upgrade abriu');
        } else {
          testResults.upgradeButton = '‚ö†Ô∏è VISUAL - Clic√°vel mas sem resultado vis√≠vel';
          console.log('   ‚ö†Ô∏è Clic√°vel mas sem resultado vis√≠vel');
        }
      } else {
        testResults.upgradeButton = '‚ùå N√ÉO ENCONTRADO';
        console.log('   ‚ùå Bot√£o "Upgrade" n√£o encontrado');
      }
    } catch (error) {
      testResults.upgradeButton = `üö® ERRO: ${error.message}`;
      console.log(`   üö® Erro: ${error.message}`);
    }
    
    // Voltar ao modal se saiu
    if (page.url() !== 'http://localhost:3001' && !page.url().includes('localhost:3001')) {
      await page.goto('http://localhost:3001');
      await page.waitForTimeout(1000);
      if (settingsButton) {
        await settingsButton.click();
        await page.waitForTimeout(1000);
      }
    }
    
    // Teste 3: Seletor de Tema
    console.log('\n3Ô∏è‚É£ Testando seletor de tema...');
    try {
      const lightButton = await page.locator('button:has-text("Claro")').first();
      const darkButton = await page.locator('button:has-text("Escuro")').first();
      
      if (await lightButton.isVisible() && await darkButton.isVisible()) {
        console.log('   ‚úì Bot√µes de tema encontrados');
        
        // Verificar estado inicial
        const lightSelected = await lightButton.evaluate(el => el.classList.contains('selected') || el.getAttribute('aria-selected') === 'true');
        const darkSelected = await darkButton.evaluate(el => el.classList.contains('selected') || el.getAttribute('aria-selected') === 'true');
        
        console.log(`   Estado inicial: Claro=${lightSelected}, Escuro=${darkSelected}`);
        
        // Tentar mudar tema
        if (lightSelected) {
          await darkButton.click();
          console.log('   Clicando em tema Escuro...');
        } else {
          await lightButton.click();
          console.log('   Clicando em tema Claro...');
        }
        
        await page.waitForTimeout(1000);
        
        // Verificar mudan√ßa visual
        const bodyClass = await page.getAttribute('body', 'class') || '';
        const htmlDataTheme = await page.getAttribute('html', 'data-theme') || '';
        const rootStyle = await page.evaluate(() => getComputedStyle(document.documentElement).getPropertyValue('--bg-color'));
        
        console.log(`   Classes/atributos ap√≥s clique: body.class="${bodyClass}", html[data-theme]="${htmlDataTheme}"`);
        
        if (bodyClass.includes('dark') || htmlDataTheme.includes('dark') || rootStyle !== '') {
          testResults.themeSelector = '‚úÖ FUNCIONAL - Tema mudou visualmente';
          console.log('   ‚úÖ Mudan√ßa de tema detectada');
        } else {
          // Verificar mudan√ßa de estado do bot√£o
          const newLightSelected = await lightButton.evaluate(el => el.classList.contains('selected') || el.getAttribute('aria-selected') === 'true');
          const newDarkSelected = await darkButton.evaluate(el => el.classList.contains('selected') || el.getAttribute('aria-selected') === 'true');
          
          if ((lightSelected !== newLightSelected) || (darkSelected !== newDarkSelected)) {
            testResults.themeSelector = '‚ö†Ô∏è PARCIAL - Estado dos bot√µes mudou mas tema visual n√£o';
            console.log('   ‚ö†Ô∏è Estado dos bot√µes mudou mas tema visual n√£o detectado');
          } else {
            testResults.themeSelector = '‚ö†Ô∏è VISUAL - Clic√°vel mas sem mudan√ßa detectada';
            console.log('   ‚ö†Ô∏è Clic√°vel mas sem mudan√ßa detectada');
          }
        }
      } else {
        testResults.themeSelector = '‚ùå N√ÉO ENCONTRADO';
        console.log('   ‚ùå Bot√µes de tema n√£o encontrados');
      }
    } catch (error) {
      testResults.themeSelector = `üö® ERRO: ${error.message}`;
      console.log(`   üö® Erro: ${error.message}`);
    }
    
    // Teste 4: Dropdown de Modelo de IA
    console.log('\n4Ô∏è‚É£ Testando dropdown de modelo de IA...');
    try {
      const modelSelect = await page.locator('select').first();
      if (await modelSelect.isVisible()) {
        console.log('   ‚úì Dropdown de modelo encontrado');
        
        const initialValue = await modelSelect.inputValue();
        console.log(`   Valor inicial: ${initialValue}`);
        
        // Listar op√ß√µes dispon√≠veis
        const options = await modelSelect.locator('option').allTextContents();
        console.log(`   Op√ß√µes dispon√≠veis: ${options.join(', ')}`);
        
        // Tentar mudar para uma op√ß√£o diferente
        if (options.length > 1) {
          const targetOption = options.find(opt => !opt.includes(initialValue)) || options[1];
          await modelSelect.selectOption({ label: targetOption });
          await page.waitForTimeout(500);
          
          const newValue = await modelSelect.inputValue();
          console.log(`   Novo valor: ${newValue}`);
          
          if (newValue !== initialValue) {
            testResults.modelSelect = '‚úÖ FUNCIONAL - Valor mudou';
            console.log('   ‚úÖ Modelo mudou com sucesso');
          } else {
            testResults.modelSelect = '‚ö†Ô∏è VISUAL - Clic√°vel mas valor n√£o mudou';
            console.log('   ‚ö†Ô∏è Clic√°vel mas valor n√£o mudou');
          }
        } else {
          testResults.modelSelect = '‚ö†Ô∏è LIMITADO - Apenas uma op√ß√£o dispon√≠vel';
          console.log('   ‚ö†Ô∏è Apenas uma op√ß√£o dispon√≠vel');
        }
      } else {
        testResults.modelSelect = '‚ùå N√ÉO ENCONTRADO';
        console.log('   ‚ùå Dropdown de modelo n√£o encontrado');
      }
    } catch (error) {
      testResults.modelSelect = `üö® ERRO: ${error.message}`;
      console.log(`   üö® Erro: ${error.message}`);
    }
    
    // Teste 5: Bot√£o "Gerenciar Cobran√ßa"
    console.log('\n5Ô∏è‚É£ Testando bot√£o "Gerenciar Cobran√ßa"...');
    try {
      const billingButton = await page.locator('button:has-text("Gerenciar Cobran√ßa"), button:has-text("Cobran√ßa")').first();
      if (await billingButton.isVisible()) {
        console.log('   ‚úì Bot√£o "Gerenciar Cobran√ßa" encontrado');
        
        const initialUrl = page.url();
        await billingButton.click();
        await page.waitForTimeout(2000);
        
        const newUrl = page.url();
        const newTab = context.pages().length > 1;
        
        if (newUrl.includes('stripe') || newUrl.includes('billing') || newUrl.includes('payment')) {
          testResults.billingButton = '‚úÖ FUNCIONAL - Redirecionou para sistema de cobran√ßa';
          console.log(`   ‚úÖ Redirecionou para sistema de cobran√ßa: ${newUrl}`);
        } else if (newUrl !== initialUrl) {
          testResults.billingButton = '‚úÖ FUNCIONAL - Redirecionou para p√°gina';
          console.log(`   ‚úÖ Redirecionou para: ${newUrl}`);
        } else if (newTab) {
          testResults.billingButton = '‚úÖ FUNCIONAL - Abriu nova aba';
          console.log('   ‚úÖ Abriu nova aba');
        } else {
          testResults.billingButton = '‚ö†Ô∏è VISUAL - Clic√°vel mas sem redirecionamento';
          console.log('   ‚ö†Ô∏è Clic√°vel mas sem redirecionamento');
        }
      } else {
        testResults.billingButton = '‚ùå N√ÉO ENCONTRADO';
        console.log('   ‚ùå Bot√£o "Gerenciar Cobran√ßa" n√£o encontrado');
      }
    } catch (error) {
      testResults.billingButton = `üö® ERRO: ${error.message}`;
      console.log(`   üö® Erro: ${error.message}`);
    }
    
    // Teste 6: Toggles de Privacidade
    console.log('\n6Ô∏è‚É£ Testando toggles de privacidade...');
    try {
      const toggles = await page.locator('input[type="checkbox"]').all();
      if (toggles.length > 0) {
        console.log(`   ‚úì ${toggles.length} toggles encontrados`);
        
        const firstToggle = toggles[0];
        const initialState = await firstToggle.isChecked();
        console.log(`   Estado inicial do primeiro toggle: ${initialState}`);
        
        await firstToggle.click();
        await page.waitForTimeout(500);
        
        const newState = await firstToggle.isChecked();
        console.log(`   Novo estado: ${newState}`);
        
        if (initialState !== newState) {
          testResults.privacyToggles = '‚úÖ FUNCIONAL - Estado mudou';
          console.log('   ‚úÖ Toggle mudou de estado');
        } else {
          testResults.privacyToggles = '‚ö†Ô∏è VISUAL - Clic√°vel mas estado n√£o mudou';
          console.log('   ‚ö†Ô∏è Clic√°vel mas estado n√£o mudou');
        }
      } else {
        testResults.privacyToggles = '‚ùå N√ÉO ENCONTRADO';
        console.log('   ‚ùå Toggles n√£o encontrados');
      }
    } catch (error) {
      testResults.privacyToggles = `üö® ERRO: ${error.message}`;
      console.log(`   üö® Erro: ${error.message}`);
    }
    
    // Teste 7: Bot√£o "Salvar altera√ß√µes"
    console.log('\n7Ô∏è‚É£ Testando bot√£o "Salvar altera√ß√µes"...');
    try {
      const saveButton = await page.locator('button:has-text("Salvar"), button:has-text("Salvar altera√ß√µes")').first();
      if (await saveButton.isVisible()) {
        console.log('   ‚úì Bot√£o "Salvar" encontrado');
        
        await saveButton.click();
        await page.waitForTimeout(1500);
        
        // Verificar se modal fechou
        const modalStillVisible = await page.isVisible('[role="dialog"], .modal, div:has-text("Configura√ß√µes")');
        
        if (!modalStillVisible) {
          testResults.saveButton = '‚úÖ FUNCIONAL - Modal fechou ap√≥s salvar';
          console.log('   ‚úÖ Modal fechou ap√≥s salvar');
        } else {
          // Verificar feedback visual (toast, mensagem de sucesso, etc.)
          const successMessage = await page.$('.toast, .alert, div:has-text("salvo"), div:has-text("sucesso")');
          if (successMessage) {
            testResults.saveButton = '‚úÖ FUNCIONAL - Mostrou feedback de salvamento';
            console.log('   ‚úÖ Mostrou feedback de salvamento');
          } else {
            testResults.saveButton = '‚ö†Ô∏è VISUAL - Clic√°vel mas sem feedback';
            console.log('   ‚ö†Ô∏è Clic√°vel mas sem feedback vis√≠vel');
          }
        }
      } else {
        testResults.saveButton = '‚ùå N√ÉO ENCONTRADO';
        console.log('   ‚ùå Bot√£o "Salvar" n√£o encontrado');
      }
    } catch (error) {
      testResults.saveButton = `üö® ERRO: ${error.message}`;
      console.log(`   üö® Erro: ${error.message}`);
    }
    
    // RESULTADOS FINAIS
    console.log('\n\nüìä RELAT√ìRIO FINAL DE FUNCIONALIDADES:');
    console.log('=====================================');
    
    const categories = {
      '‚úÖ FUNCIONAIS': [],
      '‚ö†Ô∏è VISUAIS': [],
      '‚ùå N√ÉO ENCONTRADOS': [],
      'üö® COM ERRO': []
    };
    
    for (const [feature, result] of Object.entries(testResults)) {
      if (result.includes('‚úÖ')) categories['‚úÖ FUNCIONAIS'].push(feature + ': ' + result);
      else if (result.includes('‚ö†Ô∏è')) categories['‚ö†Ô∏è VISUAIS'].push(feature + ': ' + result);
      else if (result.includes('‚ùå')) categories['‚ùå N√ÉO ENCONTRADOS'].push(feature + ': ' + result);
      else if (result.includes('üö®')) categories['üö® COM ERRO'].push(feature + ': ' + result);
    }
    
    for (const [category, items] of Object.entries(categories)) {
      if (items.length > 0) {
        console.log(`\n${category}:`);
        items.forEach(item => console.log(`  ‚Ä¢ ${item}`));
      }
    }
    
    const totalFeatures = Object.keys(testResults).length;
    const functionalFeatures = categories['‚úÖ FUNCIONAIS'].length;
    const visualFeatures = categories['‚ö†Ô∏è VISUAIS'].length;
    
    console.log('\nüìà ESTAT√çSTICAS:');
    console.log(`Total de funcionalidades testadas: ${totalFeatures}`);
    console.log(`Completamente funcionais: ${functionalFeatures} (${Math.round((functionalFeatures/totalFeatures)*100)}%)`);
    console.log(`Apenas visuais: ${visualFeatures} (${Math.round((visualFeatures/totalFeatures)*100)}%)`);
    
    console.log('\nüéØ CONCLUS√ÉO:');
    if (functionalFeatures > totalFeatures * 0.7) {
      console.log('‚úÖ EXCELENTE: Modal tem alta funcionalidade implementada');
    } else if (functionalFeatures > totalFeatures * 0.5) {
      console.log('üëç BOM: Modal tem funcionalidade razo√°vel implementada');
    } else if (functionalFeatures > totalFeatures * 0.3) {
      console.log('‚ö†Ô∏è M√âDIO: Modal tem funcionalidade b√°sica, muitos elementos s√£o apenas visuais');
    } else {
      console.log('‚ùå BAIXO: Modal √© principalmente visual, poucas funcionalidades implementadas');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
  
  console.log('\nüîö Teste conclu√≠do! Mantenha a janela aberta para revisar os resultados.');
}

// Antes de executar, verificar se o Chrome est√° com debugging habilitado
console.log('Para usar este script, certifique-se de ter o Chrome aberto com:');
console.log('chrome --remote-debugging-port=9222');
console.log('\nSe n√£o estiver, abra um novo Chrome assim e acesse localhost:3001 logado.');
console.log('\nIniciando teste em 3 segundos...');

setTimeout(() => {
  testSettingsModalLoggedIn().catch(error => {
    console.error('‚ùå Erro de conex√£o:', error);
    console.log('\nüí° SOLU√á√ÉO: Abra o Chrome com debugging:');
    console.log('/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222');
  });
}, 3000);